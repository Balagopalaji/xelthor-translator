# File: translator.py
class XelthorTranslator:
    def __init__(self):
        # Basic vocabulary dictionary: English to Xel'thor
        self.eng_to_xel = {
            # Basic verbs
            "travel": "zz'rix",
            "communicate": "ph'sor",
            "see": "xa'lor",
            "think": "mii'sor",
            "share": "ph'sor",
            "create": "vor'tix",
            "learn": "mii'zar",
            "speak": "ph'lor",
            
            # Nouns - Physical objects (xel- prefix)
            "traveler": "xel'thor",
            "star": "xel'ka",
            "ship": "xel'vor",
            "world": "xel'thal",
            "body": "xel'phi",
            
            # Nouns - Energy concepts (vor- prefix)
            "light": "vor'kaan",
            "energy": "vor'thi",
            "power": "vor'zix",
            "space": "vor'thal",
            "time": "vor'phi",
            
            # Nouns - Abstract concepts (mii- prefix)
            "wisdom": "mii'path",
            "knowledge": "mii'path",
            "truth": "mii'kan",
            "thought": "mii'lor",
            "unity": "mii'zol",
            
            # Connectors and prepositions
            "through": "vor",
            "between": "zz",
            "with": "phi",
            "in": "ka",
            "to": "th",
            "from": "rx"
        }
        
        # Xel'thor to English dictionary
        self.xel_to_eng = {v: k for k, v in self.eng_to_xel.items()}
        
        # Prefixes for states of existence
        self.prefixes = {
            "physical": "xel-",
            "energy": "vor-",
            "abstract": "mii-"
        }
        
        # Tonal indicators (added as suffixes)
        self.tones = {
            "present": "",  # neutral tone
            "past": "-pa",  # descending tone
            "future": "-zi",  # ascending tone
            "eternal": "-th"  # harmonic tone
        }
    
    def apply_grammar_rules(self, words, to_xelthor=True):
        """Apply Xel'thor grammar rules (Verb-Object-Subject order)."""
        if len(words) < 3:
            return words
        
        # Identify the verb (basic implementation)
        verb_index = None
        for i, word in enumerate(words):
            if word in self.eng_to_xel:
                xel_word = self.eng_to_xel[word]
                if any(xel_word.startswith(p) for p in ["zz'", "ph'", "xa'", "vor'", "mii'"]):
                    verb_index = i
                    break
        
        if verb_index is not None:
            if to_xelthor:
                # Move verb to front, object next, subject last
                result = ([words[verb_index]] + 
                         [w for i, w in enumerate(words) if i != verb_index and i > verb_index] +
                         [w for i, w in enumerate(words) if i != verb_index and i < verb_index])
                return result
        
        return words
    
    def apply_tense(self, xelthor_word, tense="present"):
        """Apply tonal suffix for tense."""
        if tense in self.tones:
            return xelthor_word + self.tones[tense]
        return xelthor_word
    
    def translate_to_xelthor(self, english_text, tense="present"):
        """Translate English text to Xel'thor."""
        words = english_text.lower().split()
        xelthor_words = []
        
        # First pass: basic translation
        for word in words:
            if word in self.eng_to_xel:
                xelthor_words.append(self.eng_to_xel[word])
            else:
                xelthor_words.append(f"[{word}]")
        
        # Apply grammar rules
        xelthor_words = self.apply_grammar_rules(xelthor_words, to_xelthor=True)
        
        # Apply tense to verbs
        final_words = []
        for word in xelthor_words:
            if any(word.startswith(p) for p in ["zz'", "ph'", "xa'", "vor'", "mii'"]):
                word = self.apply_tense(word, tense)
            final_words.append(word)
        
        return " ".join(final_words)
    
    def translate_to_english(self, xelthor_text):
        """Translate Xel'thor text to English."""
        words = xelthor_text.split()
        english_words = []
        
        # Remove tense markers and translate
        for word in words:
            base_word = word
            tense = "present"
            
            # Check for tense markers
            for t, marker in self.tones.items():
                if marker and word.endswith(marker):
                    base_word = word[:-len(marker)]
                    tense = t
                    break
            
            if base_word in self.xel_to_eng:
                translated = self.xel_to_eng[base_word]
                # Add tense context if not present
                if tense != "present":
                    if english_words and english_words[0] != "will" and tense == "future":
                        english_words.insert(0, "will")
                    elif english_words and not any(w in english_words for w in ["had", "was"]) and tense == "past":
                        translated = f"{'was' if translated.endswith('ing') else 'did'} {translated}"
            else:
                translated = base_word.strip('[]')
            
            english_words.append(translated)
        
        # Apply English grammar rules
        english_words = self.apply_grammar_rules(english_words, to_xelthor=False)
        
        return " ".join(english_words)

# File: main.py
from translator import XelthorTranslator

def print_menu():
    print("\n=== Xel'thor Translator ===")
    print("1. English to Xel'thor")
    print("2. Xel'thor to English")
    print("3. View vocabulary")
    print("4. View grammar rules")
    print("5. Exit")
    print("========================")

def print_grammar_rules():
    print("\nXel'thor Grammar Rules:")
    print("1. Sentence Structure: Verb-Object-Subject (VOS)")
    print("2. Prefixes:")
    print("   - xel- : physical objects")
    print("   - vor- : energy concepts")
    print("   - mii- : abstract concepts")
    print("3. Tense Markers:")
    print("   - Present: no marker")
    print("   - Past: -pa (descending tone)")
    print("   - Future: -zi (ascending tone)")
    print("   - Eternal: -th (harmonic tone)")
    print("\nExample: 'zz'rix-pa xel'thor vor'thal'")
    print("Means: 'The traveler traveled through space' (past tense)")

def main():
    translator = XelthorTranslator()
    
    while True:
        print_menu()
        choice = input("\nEnter your choice (1-5): ")
        
        if choice == "1":
            text = input("\nEnter English text: ")
            print("\nSelect tense:")
            print("1. Present")
            print("2. Past")
            print("3. Future")
            print("4. Eternal")
            tense_choice = input("Enter tense (1-4): ")
            
            tense_map = {"1": "present", "2": "past", "3": "future", "4": "eternal"}
            tense = tense_map.get(tense_choice, "present")
            
            result = translator.translate_to_xelthor(text, tense)
            print("\nXel'thor translation:")
            print(result)
            
        elif choice == "2":
            text = input("\nEnter Xel'thor text: ")
            result = translator.translate_to_english(text)
            print("\nEnglish translation:")
            print(result)
            
        elif choice == "3":
            print("\nCurrent vocabulary:")
            print("\nVerbs:")
            for eng, xel in sorted(translator.eng_to_xel.items()):
                if any(xel.startswith(p) for p in ["zz'", "ph'", "xa'", "vor'", "mii'"]):
                    print(f"{eng:15} = {xel}")
            
            print("\nPhysical Nouns (xel-):")
            for eng, xel in sorted(translator.eng_to_xel.items()):
                if xel.startswith("xel'"):
                    print(f"{eng:15} = {xel}")
            
            print("\nEnergy Nouns (vor-):")
            for eng, xel in sorted(translator.eng_to_xel.items()):
                if xel.startswith("vor'") and len(xel) > 4:
                    print(f"{eng:15} = {xel}")
            
            print("\nAbstract Nouns (mii-):")
            for eng, xel in sorted(translator.eng_to_xel.items()):
                if xel.startswith("mii'"):
                    print(f"{eng:15} = {xel}")
            
            print("\nConnectors:")
            for eng, xel in sorted(translator.eng_to_xel.items()):
                if len(xel) <= 4:
                    print(f"{eng:15} = {xel}")
                    
        elif choice == "4":
            print_grammar_rules()
            
        elif choice == "5":
            print("\nFarewell, star wanderer!")
            break
            
        else:
            print("\nInvalid choice. Please try again.")
        
        input("\nPress Enter to continue...")

if __name__ == "__main__":
    main()