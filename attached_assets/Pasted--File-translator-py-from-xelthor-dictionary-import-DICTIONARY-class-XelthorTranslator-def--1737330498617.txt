# File: translator.py
from xelthor_dictionary import DICTIONARY

class XelthorTranslator:
    def __init__(self):
        # Load vocabulary from dictionary file
        self.eng_to_xel = DICTIONARY["vocabulary"]
        self.xel_to_eng = {v: k for k, v in self.eng_to_xel.items()}
        self.prefixes = DICTIONARY["prefixes"]
        self.tones = DICTIONARY["tones"]
        self.special_phrases = DICTIONARY["special_phrases"]
    
    def apply_grammar_rules(self, words, to_xelthor=True):
        """Apply Xel'thor grammar rules (Verb-Object-Subject order)."""
        if len(words) < 3:
            return words
        
        # Identify the verb (basic implementation)
        verb_index = None
        for i, word in enumerate(words):
            if word in self.eng_to_xel:
                xel_word = self.eng_to_xel[word]
                if any(xel_word.startswith(p) for p in ["zz'", "ph'", "xa'", "vor'", "mii'"]):
                    verb_index = i
                    break
        
        if verb_index is not None:
            if to_xelthor:
                # Move verb to front, object next, subject last
                result = ([words[verb_index]] + 
                         [w for i, w in enumerate(words) if i != verb_index and i > verb_index] +
                         [w for i, w in enumerate(words) if i != verb_index and i < verb_index])
                return result
        
        return words
    
    def apply_tense(self, xelthor_word, tense="present"):
        """Apply tonal suffix for tense."""
        if tense in self.tones:
            return xelthor_word + self.tones[tense]
        return xelthor_word
    
    def translate_to_xelthor(self, english_text, tense="present"):
        """Translate English text to Xel'thor."""
        # Check for special phrases first
        lower_text = english_text.lower()
        if lower_text in self.special_phrases:
            return self.special_phrases[lower_text]
            
        words = lower_text.split()
        xelthor_words = []
        
        # First pass: basic translation
        for word in words:
            if word in self.eng_to_xel:
                xelthor_words.append(self.eng_to_xel[word])
            else:
                xelthor_words.append(f"[{word}]")
        
        # Apply grammar rules
        xelthor_words = self.apply_grammar_rules(xelthor_words, to_xelthor=True)
        
        # Apply tense to verbs
        final_words = []
        for word in xelthor_words:
            if any(word.startswith(p) for p in ["zz'", "ph'", "xa'", "vor'", "mii'"]):
                word = self.apply_tense(word, tense)
            final_words.append(word)
        
        return " ".join(final_words)
    
    def translate_to_english(self, xelthor_text):
        """Translate Xel'thor text to English."""
        # Check for special phrases first
        if xelthor_text in self.special_phrases.values():
            for eng, xel in self.special_phrases.items():
                if xel == xelthor_text:
                    return eng
        
        words = xelthor_text.split()
        english_words = []
        
        # Remove tense markers and translate
        for word in words:
            base_word = word
            tense = "present"
            
            # Check for tense markers
            for t, marker in self.tones.items():
                if marker and word.endswith(marker):
                    base_word = word[:-len(marker)]
                    tense = t
                    break
            
            if base_word in self.xel_to_eng:
                translated = self.xel_to_eng[base_word]
                # Add tense context if not present
                if tense != "present":
                    if english_words and english_words[0] != "will" and tense == "future":
                        english_words.insert(0, "will")
                    elif english_words and not any(w in english_words for w in ["had", "was"]) and tense == "past":
                        translated = f"{'was' if translated.endswith('ing') else 'did'} {translated}"
            else:
                translated = base_word.strip('[]')
            
            english_words.append(translated)
        
        # Apply English grammar rules
        english_words = self.apply_grammar_rules(english_words, to_xelthor=False)
        
        return " ".join(english_words)